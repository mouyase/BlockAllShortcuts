[
  {
    "command": "editor.action.selectAll",
    "key": "cmd+a"
  },
  {
    "command": "editor.action.selectAll",
    "key": "alt+a"
  },
  {
    "command": "deleteLeft",
    "key": "backspace",
    "when": "textInputFocus"
  },
  {
    "command": "execCopy",
    "key": "cmd+c"
  },
  {
    "command": "editor.action.clipboardCopyAction",
    "key": "alt+c"
  },
  {
    "command": "editor.action.commentLine",
    "key": "ctrl+/",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "cursorDown",
    "key": "down",
    "when": "textInputFocus"
  },
  {
    "command": "actions.find",
    "key": "cmd+f",
    "when": "editorFocus"
  },
  {
    "command": "actions.find",
    "key": "alt+f",
    "when": "editorFocus"
  },
  {
    "command": "cursorLeft",
    "key": "left",
    "when": "textInputFocus"
  },
  {
    "command": "cursorRight",
    "key": "right",
    "when": "textInputFocus"
  },
  {
    "command": "workbench.action.files.save",
    "key": "cmd+s"
  },
  {
    "command": "workbench.action.files.save",
    "key": "alt+s"
  },
  {
    "command": "workbench.action.findInFiles",
    "key": "cmd+shift+f"
  },
  {
    "command": "workbench.action.findInFiles",
    "key": "alt+shift+f"
  },
  {
    "command": "cursorUp",
    "key": "up",
    "when": "textInputFocus"
  },
  {
    "command": "execPaste",
    "key": "cmd+v"
  },
  {
    "command": "editor.action.clipboardPasteAction",
    "key": "alt+v"
  },
  {
    "command": "execCut",
    "key": "cmd+x"
  },
  {
    "command": "editor.action.clipboardCutAction",
    "key": "alt+x"
  },
  {
    "command": "undo",
    "key": "cmd+z"
  },
  {
    "command": "undo",
    "key": "alt+z"
  },
  {
    "command": "redo",
    "key": "shift+cmd+z"
  },
  {
    "command": "redo",
    "key": "shift+alt+z"
  },
  {
    "command": "deleteRight",
    "key": "delete",
    "when": "textInputFocus"
  },
  {
    "command": "undo",
    "key": "cmd+z"
  },
  {
    "command": "redo",
    "key": "shift+cmd+z"
  },
  {
    "command": "workbench.action.findInFiles",
    "key": "cmd+shift+f"
  },
  {
    "command": "cursorLeft",
    "key": "left",
    "when": "textInputFocus"
  },
  {
    "command": "cursorRight",
    "key": "right",
    "when": "textInputFocus"
  },
  {
    "command": "cursorUp",
    "key": "up",
    "when": "textInputFocus"
  },
  {
    "command": "cursorDown",
    "key": "down",
    "when": "textInputFocus"
  },
  {
    "command": "editor.action.commentLine",
    "key": "ctrl+/",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "args": {
      "invocationType": "new"
    },
    "command": "aipopup.action.modal.generate",
    "key": "cmd+k",
    "when": "editorFocus && !composerBarIsVisible"
  },
  {
    "command": "aichat.insertselectionintochat",
    "key": "cmd+l"
  },
  {
    "command": "renameFile",
    "key": "F2",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "f2",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "command": "editor.action.triggerSuggest",
    "key": "cmd+/",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "command": "editor.action.triggerSuggest",
    "key": "alt+/",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "command": "editor.action.moveLinesUpAction",
    "key": "cmd+up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "editor.action.moveLinesDownAction",
    "key": "cmd+down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "editor.action.moveLinesUpAction",
    "key": "alt+up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "editor.action.moveLinesDownAction",
    "key": "alt+down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "editor.action.quickFix",
    "key": "cmd+enter",
    "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
  {
    "command": "problems.action.showQuickFixes",
    "key": "cmd+enter",
    "when": "problemFocus"
  },
  {
    "command": "previewSelectedCodeAction",
    "key": "cmd+enter",
    "when": "codeActionMenuVisible"
  },
  {
    "command": "workbench.action.closeActiveEditor",
    "key": "cmd+w"
  },
  {
    "command": "workbench.action.closeActiveEditor",
    "key": "alt+w"
  },
  {
    "command": "workbench.action.terminal.toggleTerminal",
    "key": "cmd+t",
    "when": "terminal.active"
  },
  {
    "command": "workbench.action.terminal.toggleTerminal",
    "key": "alt+t",
    "when": "terminal.active"
  },
  {
    "command": "editor.action.organizeImports",
    "key": "shift+cmd+o",
    "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
  },
  {
    "command": "editor.action.organizeImports",
    "key": "shift+alt+o",
    "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
  },
  {
    "command": "editor.action.formatDocument",
    "key": "ctrl+cmd+f",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "command": "editor.action.formatDocument",
    "key": "ctrl+alt+f",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "editor.closeTestPeek",
    "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "key": "escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "escape",
    "command": "notebook.cell.chat.acceptChanges",
    "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused"
  },
  {
    "key": "escape",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
  },
  {
    "key": "escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "editor.action.cancelSelectionAnchor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "escape",
    "command": "editor.action.hideColorPicker",
    "when": "standaloneColorPickerVisible"
  },
  {
    "key": "escape",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inlineEditIsVisible || inlineSuggestionVisible"
  },
  {
    "key": "escape",
    "command": "editor.action.selectEditor",
    "when": "stickyScrollFocused"
  },
  {
    "key": "escape",
    "command": "editor.action.webvieweditor.hideFind",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "escape",
    "command": "editor.cancelOperation",
    "when": "cancellableOperation"
  },
  {
    "key": "escape",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible"
  },
  {
    "key": "escape",
    "command": "editor.gotoNextSymbolFromResult.cancel",
    "when": "hasSymbols"
  },
  {
    "key": "escape",
    "command": "editor.hideDropWidget",
    "when": "dropWidgetVisible"
  },
  {
    "key": "escape",
    "command": "editor.hidePasteWidget",
    "when": "pasteWidgetVisible"
  },
  {
    "key": "escape",
    "command": "inlayHints.stopReadingLineWithHint",
    "when": "isReadingLineWithInlayHints"
  },
  {
    "key": "escape",
    "command": "notebook.cell.chat.discard",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
  },
  {
    "key": "escape",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch"
  },
  {
    "key": "escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused || commentFocused"
  },
  {
    "key": "escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "escape",
    "command": "leaveEditorMessage",
    "when": "messageVisible"
  },
  {
    "key": "escape",
    "command": "leaveSnippet",
    "when": "inSnippetMode && textInputFocus"
  },
  {
    "key": "escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible"
  },
  {
    "key": "escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "escape",
    "command": "closeReplaceInFilesWidget",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "escape",
    "command": "commentsClearFilterText",
    "when": "commentsFilterFocus"
  },
  {
    "key": "escape",
    "command": "keybindings.editor.clearSearchResults",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "escape",
    "command": "keybindings.editor.rejectWhenExpression",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "list.clear",
    "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "escape",
    "command": "list.closeFind",
    "when": "listFocus && treeFindOpen"
  },
  {
    "key": "escape",
    "command": "noteMultiCursor.exit",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "escape",
    "command": "notebook.hideFind",
    "when": "notebookEditorFocused && notebookFindWidgetFocused"
  },
  {
    "key": "escape",
    "command": "problems.action.clearFilterText",
    "when": "problemsFilterFocus"
  },
  {
    "key": "escape",
    "command": "scm.clearInput",
    "when": "scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  {
    "key": "escape",
    "command": "settings.action.focusLevelUp",
    "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
  },
  {
    "key": "escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.chat.close",
    "when": "terminalChatFocus && terminalChatVisible || terminalChatVisible && terminalFocus"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "escape",
    "command": "workbench.banner.focusBanner",
    "when": "bannerFocused"
  },
  {
    "key": "escape",
    "command": "workbench.statusBar.clearFocus",
    "when": "statusBarFocused"
  },
  {
    "key": "escape",
    "command": "breadcrumbs.selectEditor",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.hideSuggestWidget",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "notebook.cell.quitEdit",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "escape",
    "command": "editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "editor.closeTypeHierarchy",
    "when": "typeHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "filesExplorer.cancelCut",
    "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
  },
  {
    "key": "escape",
    "command": "notifications.hideList",
    "when": "notificationCenterVisible"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "escape",
    "command": "workbench.action.chat.stopListening",
    "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },
  {
    "key": "escape",
    "command": "workbench.action.chat.stopReadChatItemAloud",
    "when": "scopedChatSynthesisInProgress"
  },
  {
    "key": "escape",
    "command": "workbench.action.editorDictation.stop",
    "when": "editorDictation.inProgress"
  },
  {
    "key": "escape",
    "command": "workbench.action.speech.stopReadAloud",
    "when": "scopedChatSynthesisInProgress && textToSpeechInProgress"
  },
  {
    "key": "escape",
    "command": "gitlens.key.escape",
    "when": "editorTextFocus && gitlens:key:escape && !codeActionMenuVisible && !findWidgetVisible && !isInEmbeddedEditor && !parameterHintsVisible && !quickFixWidgetVisible && !referenceSearchVisible && !renameInputVisible && !suggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "editor.action.cancelGPT4WithCmdDelete",
    "when": "hadGPT4InlineCompletionRunning"
  },
  {
    "key": "escape",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "escape",
    "command": "aipopup.action.closePromptBar",
    "when": "editorHasPromptBar && editorPromptBarFocused && editorTextFocus"
  },
  {
    "key": "escape",
    "command": "diffEditor.exitCompareMove",
    "when": "comparingMovedCode"
  },
  {
    "key": "escape",
    "command": "cursorai.action.hideGenerateInTerminal",
    "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && (arbitrary function)"
  },
  {
    "command": "tab",
    "key": "tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "command": "editor.action.acceptGPT4",
    "key": "tab",
    "when": "hasGPT4Diff"
  },
  {
    "command": "editor.emmet.action.expandAbbreviation",
    "key": "tab",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "command": "insertSnippet",
    "key": "tab",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "command": "jumpToNextSnippetPlaceholder",
    "key": "tab",
    "when": "hasNextTabstop && inSnippetMode && textInputFocus"
  },
  {
    "command": "acceptSelectedSuggestion",
    "key": "tab",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "command": "insertBestCompletion",
    "key": "tab",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "command": "insertNextSuggestion",
    "key": "tab",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "command": "editor.action.inlineSuggest.commit",
    "key": "tab",
    "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "command": "editor.action.inlineSuggest.jump",
    "key": "tab",
    "when": "inlineEditIsVisible && tabShouldJumpToInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "command": "workbench.action.terminal.acceptSelectedSuggestion",
    "key": "tab",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "command": "editor.action.acceptCursorTabSuggestion",
    "key": "tab",
    "when": "cpp.shouldAcceptTab"
  },
  {
    "command": "notebook.cell.chat.previousFromHistory",
    "key": "up",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "command": "editor.action.scrollUpHover",
    "key": "up",
    "when": "editorHoverFocused"
  },
  {
    "command": "editor.action.selectPreviousStickyScrollLine",
    "key": "up",
    "when": "stickyScrollFocused"
  },
  {
    "command": "notebook.focusPreviousEditor",
    "key": "up",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "command": "showPrevParameterHint",
    "key": "up",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "command": "selectPrevSuggestion",
    "key": "up",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "command": "focusPreviousRenameSuggestion",
    "key": "up",
    "when": "renameInputVisible"
  },
  {
    "command": "history.showPrevious",
    "key": "up",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "command": "iconSelectBox.focusUp",
    "key": "up",
    "when": "iconSelectBoxFocus"
  },
  {
    "command": "interactive.history.previous",
    "key": "up",
    "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "command": "list.focusUp",
    "key": "up",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "command": "notebook.focusPreviousEditor",
    "key": "up",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  {
    "command": "notifications.focusPreviousToast",
    "key": "up",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "command": "quickInput.previous",
    "key": "up",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "command": "scm.viewPreviousCommit",
    "key": "up",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "command": "workbench.action.interactivePlayground.arrowUp",
    "key": "up",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "command": "workbench.banner.focusPreviousAction",
    "key": "up",
    "when": "bannerFocused"
  },
  {
    "command": "workbench.statusBar.focusPrevious",
    "key": "up",
    "when": "statusBarFocused"
  },
  {
    "command": "notebook.cell.nullAction",
    "key": "up",
    "when": "notebookOutputInputFocused"
  },
  {
    "command": "workbench.action.terminal.selectPrevSuggestion",
    "key": "up",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "command": "selectPrevCodeAction",
    "key": "up",
    "when": "codeActionMenuVisible"
  },
  {
    "command": "notebook.cell.chat.nextFromHistory",
    "key": "down",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "command": "editor.action.scrollDownHover",
    "key": "down",
    "when": "editorHoverFocused"
  },
  {
    "command": "editor.action.selectNextStickyScrollLine",
    "key": "down",
    "when": "stickyScrollFocused"
  },
  {
    "command": "notebook.focusNextEditor",
    "key": "down",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "command": "settings.action.focusSettingsFile",
    "key": "down",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "command": "showNextParameterHint",
    "key": "down",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "command": "selectNextSuggestion",
    "key": "down",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "command": "focusNextRenameSuggestion",
    "key": "down",
    "when": "renameInputVisible"
  },
  {
    "command": "breadcrumbs.selectFocused",
    "key": "down",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "command": "history.showNext",
    "key": "down",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "command": "iconSelectBox.focusDown",
    "key": "down",
    "when": "iconSelectBoxFocus"
  },
  {
    "command": "interactive.history.next",
    "key": "down",
    "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
  },
  {
    "command": "list.focusDown",
    "key": "down",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "command": "notebook.focusNextEditor",
    "key": "down",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  {
    "command": "notifications.focusNextToast",
    "key": "down",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "command": "quickInput.next",
    "key": "down",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "command": "scm.viewNextCommit",
    "key": "down",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "command": "workbench.action.interactivePlayground.arrowDown",
    "key": "down",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "command": "workbench.banner.focusNextAction",
    "key": "down",
    "when": "bannerFocused"
  },
  {
    "command": "workbench.statusBar.focusNext",
    "key": "down",
    "when": "statusBarFocused"
  },
  {
    "command": "notebook.cell.nullAction",
    "key": "down",
    "when": "notebookOutputInputFocused"
  },
  {
    "command": "workbench.action.terminal.selectNextSuggestion",
    "key": "down",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "command": "selectNextCodeAction",
    "key": "down",
    "when": "codeActionMenuVisible"
  },
  {
    "command": "breakpointWidget.action.acceptInput",
    "key": "enter",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "command": "editor.action.extensioneditor.findNext",
    "key": "enter",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "command": "editor.action.goToFocusedStickyScrollLine",
    "key": "enter",
    "when": "stickyScrollFocused"
  },
  {
    "command": "editor.action.insertColorWithStandaloneColorPicker",
    "key": "enter",
    "when": "standaloneColorPickerFocused"
  },
  {
    "command": "editor.action.nextMatchFindAction",
    "key": "enter",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "command": "editor.action.webvieweditor.findNext",
    "key": "enter",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "command": "interactive.execute",
    "key": "enter",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "command": "repl.action.acceptInput",
    "key": "enter",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "command": "repl.execute",
    "key": "enter",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.repl'"
  },
  {
    "command": "workbench.action.chat.submit",
    "key": "enter",
    "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatLocation != 'editing-session'"
  },
  {
    "command": "workbench.action.edits.submit",
    "key": "enter",
    "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress && !isApplyingChatEdits && chatLocation == 'editing-session'"
  },
  {
    "command": "editor.action.replaceOne",
    "key": "enter",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "command": "acceptSelectedSuggestion",
    "key": "enter",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "command": "acceptRenameInput",
    "key": "enter",
    "when": "editorFocus && renameInputVisible && !isComposing"
  },
  {
    "command": "breadcrumbs.selectFocused",
    "key": "enter",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "command": "iconSelectBox.selectFocused",
    "key": "enter",
    "when": "iconSelectBoxFocus"
  },
  {
    "command": "keybindings.editor.acceptWhenExpression",
    "key": "enter",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "command": "keybindings.editor.defineKeybinding",
    "key": "enter",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "command": "list.select",
    "key": "enter",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "command": "notebook.cell.chat.accept",
    "key": "enter",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
  },
  {
    "command": "notebook.cell.edit",
    "key": "enter",
    "when": "notebookCellListFocused && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "command": "notification.toggle",
    "key": "enter",
    "when": "notificationFocus"
  },
  {
    "command": "problems.action.open",
    "key": "enter",
    "when": "problemFocus"
  },
  {
    "command": "revealReference",
    "key": "enter",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "command": "search.action.openResult",
    "key": "enter",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "command": "settings.action.focusSettingControl",
    "key": "enter",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "command": "settings.action.focusSettingsList",
    "key": "enter",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "command": "workbench.action.terminal.findPrevious",
    "key": "enter",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "command": "workbench.action.terminal.renameActiveTab",
    "key": "f2",
    "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
  },
  {
    "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
    "key": "enter",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'"
  },
  {
    "command": "debug.renameWatchExpression",
    "key": "enter",
    "when": "watchExpressionsFocused"
  },
  {
    "command": "debug.setVariable",
    "key": "enter",
    "when": "variablesFocused"
  },
  {
    "command": "remote.tunnel.label",
    "key": "enter",
    "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "command": "list.stickyScrollselect",
    "key": "enter",
    "when": "treestickyScrollFocused"
  },
  {
    "command": "acceptSelectedCodeAction",
    "key": "enter",
    "when": "codeActionMenuVisible"
  },
  {
    "command": "workbench.action.quit",
    "key": "cmd+q"
  },
  {
    "command": "workbench.action.quit",
    "key": "alt+q"
  },
  {
    "command": "editor.action.copyLinesDownAction",
    "key": "cmd+d",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "notebook.cell.copyDown",
    "key": "cmd+d",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "command": "editor.action.copyLinesDownAction",
    "key": "alt+d",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "notebook.cell.copyDown",
    "key": "alt+d",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "command": "workbench.action.files.newUntitledFile",
    "key": "cmd+n"
  },
  {
    "command": "workbench.action.files.newUntitledFile",
    "key": "alt+n"
  },
  {
    "command": "outdent",
    "key": "shift+tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "command": "workbench.action.showCommands",
    "key": "cmd+p"
  },
  {
    "command": "workbench.action.showCommands",
    "key": "alt+p"
  },
  {
    "command": "workbench.action.quickOpen",
    "key": "shift shift"
  },
  {
    "command": "filesExplorer.copy",
    "key": "cmd+c",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "command": "filesExplorer.cut",
    "key": "cmd+x",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "command": "filesExplorer.paste",
    "key": "cmd+v",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "command": "filesExplorer.copy",
    "key": "alt+c",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "command": "filesExplorer.cut",
    "key": "alt+x",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "command": "filesExplorer.paste",
    "key": "alt+v",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "command": "filesExplorer.findInFolder",
    "key": "shift+cmd+f",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "command": "filesExplorer.findInFolder",
    "key": "shift+alt+f",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "command": "moveFileToTrash",
    "key": "delete",
    "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "command": "moveFileToTrash",
    "key": "cmd+backspace",
    "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "command": "moveFileToTrash",
    "key": "alt+backspace",
    "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "key": "shift+cmd+t",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "shift+alt+t",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "shift+up",
    "command": "cursorUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+down",
    "command": "cursorDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+left",
    "command": "cursorLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+right",
    "command": "cursorRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+left",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "alt+left",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "home",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+left",
    "command": "cursorHomeSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "shift+alt+left",
    "command": "cursorHomeSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "shift+home",
    "command": "cursorHomeSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "cmd+right",
    "command": "cursorHomeSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "alt+right",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "end",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "shift+cmd+right",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "shift+alt+right",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "shift+end",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "pagedown",
    "command": "cursorPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "pageup",
    "command": "cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+i",
    "command": "editor.action.transformToLowercase",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+cmd+u",
    "command": "editor.action.transformToUppercase",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+i",
    "command": "editor.action.transformToLowercase",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+u",
    "command": "editor.action.transformToUppercase",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+cmd+l",
    "command": "workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused"
  },
  {
    "key": "shift+alt+l",
    "command": "workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused"
  },
  {
    "key": "cmd+[",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+[",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+]",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+]",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+cmd+[",
    "command": "editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+alt+[",
    "command": "editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+cmd+]",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+alt+]",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+cmd+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+l",
    "command": "workbench.action.chat.newChat",
    "when": "chatIsEnabled && inChat && chatLocation != 'editing-session'"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.chat.newChat",
    "when": "chatIsEnabled && inChat && chatLocation != 'editing-session'"
  },
  {
    "key": "cmd+l",
    "command": "workbench.action.chat.newEditSession",
    "when": "chatEditingParticipantRegistered && chatIsEnabled && inChat && chatLocation == 'editing-session'"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.chat.newEditSession",
    "when": "chatEditingParticipantRegistered && chatIsEnabled && inChat && chatLocation == 'editing-session'"
  },
  {
    "key": "cmd+l",
    "command": "aichat.newchataction"
  },
  {
    "key": "alt+l",
    "command": "aichat.newchataction"
  }
]
